/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package test

import (
	"fmt"
	"github.com/prometheus/client_golang/prometheus"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"strings"
)

// NewCounterReader generates a strings.Reader to be used by Prometheus' testutils. The Reader will contain the
// expected counter metric data generated by using the parameters passed to this function.
func NewCounterReader(opts prometheus.CounterOpts, labels, data []string) *strings.Reader {
	counterData := getMetricHeaderString(opts.Name, opts.Help, "counter")
	metricLabels := getMetricLabelsString(labels, data)
	counterData += fmt.Sprintf("%s{%s} %d\n", opts.Name, metricLabels, 1)

	return strings.NewReader(counterData)
}

// NewHistogramReader generates a strings.Reader to be used by Prometheus' testutils. The Reader will contain the
// expected histogram metric data generated by using the parameters passed to this function.
func NewHistogramReader(opts prometheus.HistogramOpts, labels, data []string, startTime, completionTime *metav1.Time) *strings.Reader {
	histogramData := getMetricHeaderString(opts.Name, opts.Help, "histogram")

	elapsedTime := completionTime.Sub(startTime.Time).Seconds()
	metricLabels := getMetricLabelsString(labels, data)

	for _, bucket := range opts.Buckets {
		var items int
		if bucket >= elapsedTime {
			items = 1
		}
		histogramData += fmt.Sprintf("%s_bucket{%sle=\"%g\"} %d\n", opts.Name, metricLabels, bucket, items)
	}

	histogramData += fmt.Sprintf("%s_sum{%s} %g\n\n", opts.Name, metricLabels, elapsedTime)
	histogramData += fmt.Sprintf("%s_count{%s} %d\n", opts.Name, metricLabels, 1)

	return strings.NewReader(histogramData)
}

// getMetricHeaderString returns the header that can be seen in Prometheus metrics using the parameters passed
// to the function.
func getMetricHeaderString(name, help, kind string) string {
	header := fmt.Sprintf("# HELP %s %s\n", name, help)
	header += fmt.Sprintf("# TYPE %s %s\n", name, kind)

	return header
}

// getMetricLabelsString returns the label string that can be seen in Prometheus metrics data. This function uses the
// labels and optional data to generate mock content. In case data is nil, labels are used for label and value.
func getMetricLabelsString(labels, data []string) string {
	var metricLabels string

	if data != nil && len(data) != len(labels) {
		fmt.Println("toolkit: data and labels size mismatch")
		return ""
	}

	if data != nil {
		for i := 0; i < len(labels); i++ {
			metricLabels += fmt.Sprintf("%s=\"%s\",", labels[i], data[i])
		}
	} else {
		for _, label := range labels {
			metricLabels += fmt.Sprintf("%s=\"%s\",", label, label)
		}
	}

	return metricLabels
}
